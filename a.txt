[DEBUG] init_registry: initialized registry and globals (simplified)
[DEBUG] internshrstr: str='test_function_basic.aql', len=23, hash=745848503, table_size=128, table_nuse=0
[DEBUG] internshrstr: str='_ENV', len=4, hash=2089965421, table_size=128, table_nuse=1
[DEBUG] enterblock: entered block, nactvar=0, isloop=0, mode=0
next: f (102) -> u (117)next: u (117) -> n (110)next: n (110) -> c (99)next: c (99) -> t (116)next: t (116) -> i (105)next: i (105) -> o (111)next: o (111) -> n (110)next: n (110) ->   (32)[DEBUG] internshrstr: str='function', len=8, hash=3559143499, table_size=128, table_nuse=2
[DEBUG] statlist: entering, current token = 266
[DEBUG] statlist: in loop, current token = 266
next:   (32) -> h (104)next: h (104) -> e (101)next: e (101) -> l (108)next: l (108) -> l (108)next: l (108) -> o (111)next: o (111) -> ( (40)[DEBUG] internshrstr: str='hello', len=5, hash=261238937, table_size=128, table_nuse=3
[DEBUG] check: expecting token 351, got token 351
[DEBUG] check: token matched successfully
next: ( (40) -> ) (41)[DEBUG] aqlK_indexed: using register 0 (freereg was 0)
[DEBUG] aqlK_dischargevars: entering, e->k=4
[DEBUG] aqlK_dischargevars: switching on e->k=4
[DEBUG] aqlK_dischargevars: default case for e->k=4
[DEBUG] enterblock: entered block, nactvar=0, isloop=0, mode=0
[DEBUG] checknext: calling check for token 329
[DEBUG] check: expecting token 329, got token 329
[DEBUG] check: token matched successfully
[DEBUG] checknext: check passed, calling aqlX_next, current token before = 329
next: ) (41) ->   (32)[DEBUG] checknext: aqlX_next completed, current token after = 330
[DEBUG] adjustlocalvars: activating 0 variables, reglevel=0
[DEBUG] checknext: calling check for token 330
[DEBUG] check: expecting token 330, got token 330
[DEBUG] check: token matched successfully
[DEBUG] checknext: check passed, calling aqlX_next, current token before = 330
next:   (32) -> { (123)next: { (123) -> ? (10)[DEBUG] checknext: aqlX_next completed, current token after = 123
[DEBUG] checknext: calling check for token 123
[DEBUG] check: expecting token 123, got token 123
[DEBUG] check: token matched successfully
[DEBUG] checknext: check passed, calling aqlX_next, current token before = 123
next: ? (10) ->   (32)next:   (32) ->   (32)next:   (32) ->   (32)next:   (32) ->   (32)next:   (32) -> p (112)next: p (112) -> r (114)next: r (114) -> i (105)next: i (105) -> n (110)next: n (110) -> t (116)next: t (116) -> ( (40)[DEBUG] internshrstr: str='print', len=5, hash=271190290, table_size=128, table_nuse=4
[DEBUG] checknext: aqlX_next completed, current token after = 351
[DEBUG] statlist: entering, current token = 351
[DEBUG] statlist: in loop, current token = 351
[DEBUG] exprstat: calling singlevar_unified
[DEBUG] check: expecting token 351, got token 351
[DEBUG] check: token matched successfully
next: ( (40) -> " (34)[DEBUG] exprstat: singlevar_unified returned, v.k=20
next: " (34) -> H (72)next: H (72) -> e (101)next: e (101) -> l (108)next: l (108) -> l (108)next: l (108) -> o (111)next: o (111) ->   (32)next:   (32) -> f (102)next: f (102) -> r (114)next: r (114) -> o (111)next: o (111) -> m (109)next: m (109) ->   (32)next:   (32) -> f (102)next: f (102) -> u (117)next: u (117) -> n (110)next: n (110) -> c (99)next: c (99) -> t (116)next: t (116) -> i (105)next: i (105) -> o (111)next: o (111) -> n (110)next: n (110) -> ! (33)next: ! (33) -> " (34)next: " (34) -> ) (41)[DEBUG] internshrstr: str='Hello from function!', len=20, hash=3456136724, table_size=128, table_nuse=5
[DEBUG] expr: entering, current token = 295
[DEBUG] simpleexp: entering, current token = 295
next: ) (41) -> ? (10)[DEBUG] getbinopr: input token=330 (TK_GE=319)
[DEBUG] getbinopr: unknown token 330, returning OPR_NOBINOPR
[DEBUG] expr: exiting, current token = 330
[DEBUG] aqlK_dischargevars: entering, e->k=7
[DEBUG] aqlK_dischargevars: switching on e->k=7
[DEBUG] aqlK_dischargevars: default case for e->k=7
[DEBUG] aqlK_dischargevars: entering, e->k=7
[DEBUG] aqlK_dischargevars: switching on e->k=7
[DEBUG] aqlK_dischargevars: default case for e->k=7
[DEBUG] checknext: calling check for token 330
[DEBUG] check: expecting token 330, got token 330
[DEBUG] check: token matched successfully
[DEBUG] checknext: check passed, calling aqlX_next, current token before = 330
next: ? (10) -> } (125)next: } (125) -> ? (10)[DEBUG] checknext: aqlX_next completed, current token after = 125
[DEBUG] aqlK_dischargevars: entering, e->k=8
[DEBUG] aqlK_dischargevars: switching on e->k=8
[DEBUG] aqlK_dischargevars: default case for e->k=8
[DEBUG] aqlK_dischargevars: entering, e->k=8
[DEBUG] aqlK_dischargevars: switching on e->k=8
[DEBUG] aqlK_dischargevars: default case for e->k=8
[DEBUG] statlist: statement completed, current token = 125
[DEBUG] statlist: exiting loop, current token = 125
[DEBUG] checknext: calling check for token 125
[DEBUG] check: expecting token 125, got token 125
[DEBUG] check: token matched successfully
[DEBUG] checknext: check passed, calling aqlX_next, current token before = 125
next: ? (10) -> ? (10)next: ? (10) -> r (114)next: r (114) -> e (101)next: e (101) -> t (116)next: t (116) -> u (117)next: u (117) -> r (114)next: r (114) -> n (110)next: n (110) ->   (32)[DEBUG] internshrstr: str='return', len=6, hash=422601765, table_size=128, table_nuse=6
[DEBUG] checknext: aqlX_next completed, current token after = 275
[DEBUG] aqlK_dischargevars: entering, e->k=17
[DEBUG] aqlK_dischargevars: switching on e->k=17
[DEBUG] aqlK_dischargevars: default case for e->k=17
[DEBUG] aqlK_dischargevars: entering, e->k=17
[DEBUG] aqlK_dischargevars: switching on e->k=17
[DEBUG] aqlK_dischargevars: default case for e->k=17
[DEBUG] leaveblock: leaving block, cleaning up from level 0
[DEBUG] leaveblock: cleaned up containers to count 0
[DEBUG] leaveblock: normal cleanup, freereg=0
[DEBUG] leaveblock: completed, freereg=0, active_vars=0
[DEBUG] aqlK_storevar: entering, var->k=17, ex->k=8
[DEBUG] aqlK_storevar: VINDEXUP=13, VLOCAL=9, VUPVAL=10
[DEBUG] aqlK_storevar: VRELOC case, handling global assignment
[DEBUG] aqlK_storevar: previous instruction opcode=10 (OP_GETTABUP=10)
[DEBUG] aqlK_dischargevars: entering, e->k=8
[DEBUG] aqlK_dischargevars: switching on e->k=8
[DEBUG] aqlK_dischargevars: default case for e->k=8
[DEBUG] aqlK_dischargevars: entering, e->k=8
[DEBUG] aqlK_dischargevars: switching on e->k=8
[DEBUG] aqlK_dischargevars: default case for e->k=8
[DEBUG] aqlK_storevar: generating SETTABUP with table=0, key=128, value=1
[DEBUG] statlist: statement completed, current token = 275
[DEBUG] statlist: in loop, current token = 275
next:   (32) -> h (104)next: h (104) -> e (101)next: e (101) -> l (108)next: l (108) -> l (108)next: l (108) -> o (111)next: o (111) -> ( (40)[DEBUG] internshrstr: str='hello', len=5, hash=261238937, table_size=128, table_nuse=7
[DEBUG] expr: entering, current token = 351
[DEBUG] simpleexp: entering, current token = 351
[DEBUG] check: expecting token 351, got token 351
[DEBUG] check: token matched successfully
next: ( (40) -> ) (41)[DEBUG] aqlK_indexed: using register 0 (freereg was 0)
[DEBUG] aqlK_dischargevars: entering, e->k=4
[DEBUG] aqlK_dischargevars: switching on e->k=4
[DEBUG] aqlK_dischargevars: default case for e->k=4
next: ) (41) -> ? (-1)[DEBUG] checknext: calling check for token 330
[DEBUG] check: expecting token 330, got token 330
[DEBUG] check: token matched successfully
[DEBUG] checknext: check passed, calling aqlX_next, current token before = 330
[DEBUG] checknext: aqlX_next completed, current token after = 348
[DEBUG] getbinopr: input token=348 (TK_GE=319)
[DEBUG] getbinopr: unknown token 348, returning OPR_NOBINOPR
[DEBUG] expr: exiting, current token = 348
[DEBUG] aqlK_dischargevars: entering, e->k=8
[DEBUG] aqlK_dischargevars: switching on e->k=8
[DEBUG] aqlK_dischargevars: default case for e->k=8
[DEBUG] check: expecting token 348, got token 348
[DEBUG] check: token matched successfully
[DEBUG] leaveblock: leaving block, cleaning up from level 0
[DEBUG] leaveblock: cleaned up containers to count 0
[DEBUG] leaveblock: normal cleanup, freereg=0
[DEBUG] leaveblock: completed, freereg=0, active_vars=0

üîç === LEXICAL ANALYSIS (Tokens) ===
   0: UNKNOWN      value=function (line 1, col 9)
   1: IDENTIFIER   value=hello (line 1, col 15)
   2: LBRACE       value={ (line 1, col 19)
   3: IDENTIFIER   value=print (line 2, col 10)
   4: RBRACE       value=} (line 3, col 2)
   5: RETURN       value=return (line 5, col 7)
   6: IDENTIFIER   value=hello (line 5, col 13)

üìä Total tokens: 7

‚úÖ Lexical analysis completed successfully

üîç === ABSTRACT SYNTAX TREE (AST) ===

üìä AST Statistics:
  Total nodes: 0


‚öôÔ∏è  === BYTECODE INSTRUCTIONS ===
üì¶ Constants Pool:
  CONST[0] = "hello"
  CONST[1] = nil
  CONST[2] = nil
  CONST[3] = nil

üìù Instructions:
  PC    OPCODE       A        B        C       
  ---   ------       -        -        -       
  0     GETTABUP     0        0        128       # GETTABUP 0 0 128
  1     CLOSURE      1        0        0         # CLOSURE 1 0 0
  2     SETTABUP     0        128      1         # SETTABUP 0 128 1
  3     GETTABUP     0        0        128       # GETTABUP 0 0 128
  4     CALL         3        1        2         # CALL 3 1 2
  5     RET_ONE      3        2        0         # return R(3)
  6     RET_VOID     0        0        0         # return
  7     MOVE         0        0        0         # MOVE 0 0 0

üìä Total instructions: 8

‚úÖ Bytecode generation completed successfully
[DEBUG] f_execute: entering
[DEBUG] f_execute: initializing _ENV upvalue
[DEBUG] get_globals_dict: creating new globals dict
[DEBUG] get_globals_dict: successfully created globals dict
[DEBUG] f_execute: _ENV upvalue set to globals dict
[DEBUG] f_execute: calling aqlV_execute
[DEBUG] aqlV_execute: entering VM execution
[DEBUG] aqlV_execute: safety checks passed, starting execution
aqlV_execute: starting execution loop
üöÄ === EXECUTION TRACE ===


üîç === REGISTER STATE ===

üöÄ === EXECUTION TRACE ===

[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=0, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: found empty entry at index 9, key_type=0
[DEBUG] aqlD_get: entry not found
OP_GETTABUP: global variable not found, setting nil[DEBUG] aqlV_execute: PC=1, opcode=55 (CLOSURE), A=1, B=0, C=0
üìç PC=1: CLOSURE A=1 B=0 C=0
[DEBUG] aqlV_execute: PC=2, opcode=11 (SETTABUP), A=0, B=128, C=1
üìç PC=2: SETTABUP UPVAL[128][R(1)] := R(0)
OP_SETTABUP: A=0 B=128 C=1OP_SETTABUP: upval type=11, key type=4, val type=6[DEBUG] OP_SETTABUP: key is string 'hello', length=5
OP_SETTABUP: setting global variable in dict[DEBUG] aqlD_set: setting key 'hello', dict size=0, dict=0x7fec8b5040e0
[DEBUG] aqlD_set: computed hash=261238937 for key 'hello'
[DEBUG] aqlD_set: before setobj, hash=261238937
[DEBUG] aqlD_set: after setobj, hash=261238937
[DEBUG] aqlD_set: created entry with hash=261238937
[DEBUG] aqlD_set: stored entry at index 9 with hash=261238937
[DEBUG] aqlV_execute: PC=3, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=3: GETTABUP R(0) := UPVAL[0][R(128)]
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=4, opcode=48 (CALL), A=3, B=1, C=2
üìç PC=4: CALL A=3 B=1 C=2
[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=1, opcode=55 (CLOSURE), A=1, B=0, C=0
üìç PC=1: CLOSURE A=1 B=0 C=0
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=2, opcode=11 (SETTABUP), A=0, B=128, C=1
üìç PC=2: SETTABUP UPVAL[128][R(1)] := R(0)
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_SETTABUP: A=0 B=128 C=1OP_SETTABUP: upval type=11, key type=4, val type=6[DEBUG] OP_SETTABUP: key is string 'hello', length=5
OP_SETTABUP: setting global variable in dict[DEBUG] aqlD_set: setting key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] aqlD_set: computed hash=261238937 for key 'hello'
[DEBUG] aqlD_set: before setobj, hash=261238937
[DEBUG] aqlD_set: after setobj, hash=261238937
[DEBUG] aqlD_set: created entry with hash=261238937
[DEBUG] aqlV_execute: PC=3, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=3: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=4, opcode=48 (CALL), A=3, B=1, C=2
üìç PC=4: CALL A=3 B=1 C=2
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=1, opcode=55 (CLOSURE), A=1, B=0, C=0
üìç PC=1: CLOSURE A=1 B=0 C=0
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=2, opcode=11 (SETTABUP), A=0, B=128, C=1
üìç PC=2: SETTABUP UPVAL[128][R(1)] := R(0)
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_SETTABUP: A=0 B=128 C=1OP_SETTABUP: upval type=11, key type=4, val type=6[DEBUG] OP_SETTABUP: key is string 'hello', length=5
OP_SETTABUP: setting global variable in dict[DEBUG] aqlD_set: setting key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] aqlD_set: computed hash=261238937 for key 'hello'
[DEBUG] aqlD_set: before setobj, hash=261238937
[DEBUG] aqlD_set: after setobj, hash=261238937
[DEBUG] aqlD_set: created entry with hash=261238937
[DEBUG] aqlV_execute: PC=3, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=3: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=4, opcode=48 (CALL), A=3, B=1, C=2
üìç PC=4: CALL A=3 B=1 C=2
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=1, opcode=55 (CLOSURE), A=1, B=0, C=0
üìç PC=1: CLOSURE A=1 B=0 C=0
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=2, opcode=11 (SETTABUP), A=0, B=128, C=1
üìç PC=2: SETTABUP UPVAL[128][R(1)] := R(0)
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_SETTABUP: A=0 B=128 C=1OP_SETTABUP: upval type=11, key type=4, val type=6[DEBUG] OP_SETTABUP: key is string 'hello', length=5
OP_SETTABUP: setting global variable in dict[DEBUG] aqlD_set: setting key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] aqlD_set: computed hash=261238937 for key 'hello'
[DEBUG] aqlD_set: before setobj, hash=261238937
[DEBUG] aqlD_set: after setobj, hash=261238937
[DEBUG] aqlD_set: created entry with hash=261238937
[DEBUG] aqlV_execute: PC=3, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=3: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=4, opcode=48 (CALL), A=3, B=1, C=2
üìç PC=4: CALL A=3 B=1 C=2
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=1, opcode=55 (CLOSURE), A=1, B=0, C=0
üìç PC=1: CLOSURE A=1 B=0 C=0
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=2, opcode=11 (SETTABUP), A=0, B=128, C=1
üìç PC=2: SETTABUP UPVAL[128][R(1)] := R(0)
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_SETTABUP: A=0 B=128 C=1OP_SETTABUP: upval type=11, key type=4, val type=6[DEBUG] OP_SETTABUP: key is string 'hello', length=5
OP_SETTABUP: setting global variable in dict[DEBUG] aqlD_set: setting key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] aqlD_set: computed hash=261238937 for key 'hello'
[DEBUG] aqlD_set: before setobj, hash=261238937
[DEBUG] aqlD_set: after setobj, hash=261238937
[DEBUG] aqlD_set: created entry with hash=261238937
[DEBUG] aqlV_execute: PC=3, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=3: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=4, opcode=48 (CALL), A=3, B=1, C=2
üìç PC=4: CALL A=3 B=1 C=2
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=1, opcode=55 (CLOSURE), A=1, B=0, C=0
üìç PC=1: CLOSURE A=1 B=0 C=0
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=2, opcode=11 (SETTABUP), A=0, B=128, C=1
üìç PC=2: SETTABUP UPVAL[128][R(1)] := R(0)
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_SETTABUP: A=0 B=128 C=1OP_SETTABUP: upval type=11, key type=4, val type=6[DEBUG] OP_SETTABUP: key is string 'hello', length=5
OP_SETTABUP: setting global variable in dict[DEBUG] aqlD_set: setting key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] aqlD_set: computed hash=261238937 for key 'hello'
[DEBUG] aqlD_set: before setobj, hash=261238937
[DEBUG] aqlD_set: after setobj, hash=261238937
[DEBUG] aqlD_set: created entry with hash=261238937
[DEBUG] aqlV_execute: PC=3, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=3: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=4, opcode=48 (CALL), A=3, B=1, C=2
üìç PC=4: CALL A=3 B=1 C=2
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=1, opcode=55 (CLOSURE), A=1, B=0, C=0
üìç PC=1: CLOSURE A=1 B=0 C=0
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=2, opcode=11 (SETTABUP), A=0, B=128, C=1
üìç PC=2: SETTABUP UPVAL[128][R(1)] := R(0)
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_SETTABUP: A=0 B=128 C=1OP_SETTABUP: upval type=11, key type=4, val type=6[DEBUG] OP_SETTABUP: key is string 'hello', length=5
OP_SETTABUP: setting global variable in dict[DEBUG] aqlD_set: setting key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] aqlD_set: computed hash=261238937 for key 'hello'
[DEBUG] aqlD_set: before setobj, hash=261238937
[DEBUG] aqlD_set: after setobj, hash=261238937
[DEBUG] aqlD_set: created entry with hash=261238937
[DEBUG] aqlV_execute: PC=3, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=3: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=4, opcode=48 (CALL), A=3, B=1, C=2
üìç PC=4: CALL A=3 B=1 C=2
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=1, opcode=55 (CLOSURE), A=1, B=0, C=0
üìç PC=1: CLOSURE A=1 B=0 C=0
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=2, opcode=11 (SETTABUP), A=0, B=128, C=1
üìç PC=2: SETTABUP UPVAL[128][R(1)] := R(0)
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_SETTABUP: A=0 B=128 C=1OP_SETTABUP: upval type=11, key type=4, val type=6[DEBUG] OP_SETTABUP: key is string 'hello', length=5
OP_SETTABUP: setting global variable in dict[DEBUG] aqlD_set: setting key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] aqlD_set: computed hash=261238937 for key 'hello'
[DEBUG] aqlD_set: before setobj, hash=261238937
[DEBUG] aqlD_set: after setobj, hash=261238937
[DEBUG] aqlD_set: created entry with hash=261238937
[DEBUG] aqlV_execute: PC=3, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=3: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=4, opcode=48 (CALL), A=3, B=1, C=2
üìç PC=4: CALL A=3 B=1 C=2
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=1, opcode=55 (CLOSURE), A=1, B=0, C=0
üìç PC=1: CLOSURE A=1 B=0 C=0
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=2, opcode=11 (SETTABUP), A=0, B=128, C=1
üìç PC=2: SETTABUP UPVAL[128][R(1)] := R(0)
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_SETTABUP: A=0 B=128 C=1OP_SETTABUP: upval type=11, key type=4, val type=6[DEBUG] OP_SETTABUP: key is string 'hello', length=5
OP_SETTABUP: setting global variable in dict[DEBUG] aqlD_set: setting key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] aqlD_set: computed hash=261238937 for key 'hello'
[DEBUG] aqlD_set: before setobj, hash=261238937
[DEBUG] aqlD_set: after setobj, hash=261238937
[DEBUG] aqlD_set: created entry with hash=261238937
[DEBUG] aqlV_execute: PC=3, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=3: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=4, opcode=48 (CALL), A=3, B=1, C=2
üìç PC=4: CALL A=3 B=1 C=2
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=1, opcode=55 (CLOSURE), A=1, B=0, C=0
üìç PC=1: CLOSURE A=1 B=0 C=0
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=2, opcode=11 (SETTABUP), A=0, B=128, C=1
üìç PC=2: SETTABUP UPVAL[128][R(1)] := R(0)
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_SETTABUP: A=0 B=128 C=1OP_SETTABUP: upval type=11, key type=4, val type=6[DEBUG] OP_SETTABUP: key is string 'hello', length=5
OP_SETTABUP: setting global variable in dict[DEBUG] aqlD_set: setting key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] aqlD_set: computed hash=261238937 for key 'hello'
[DEBUG] aqlD_set: before setobj, hash=261238937
[DEBUG] aqlD_set: after setobj, hash=261238937
[DEBUG] aqlD_set: created entry with hash=261238937
[DEBUG] aqlV_execute: PC=3, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=3: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6
OP_GETTABUP: found global variable, type=6[DEBUG] aqlV_execute: PC=4, opcode=48 (CALL), A=3, B=1, C=2
üìç PC=4: CALL A=3 B=1 C=2
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
[DEBUG] aqlV_execute: PC=0, opcode=10 (GETTABUP), A=0, B=0, C=128
üìç PC=0: GETTABUP R(0) := UPVAL[0][R(128)]
  Before: üìä Registers: R0=<function> R1=<function> R2=nil R3=nil 
OP_GETTABUP: A=0 B=0 C=128OP_GETTABUP: cl=0x7fec8b5040a0, cl->upvals=0x7fec8b5040c0OP_GETTABUP: cl->nupvalues=1OP_GETTABUP: upval type=11, key type=4OP_GETTABUP: accessing global dict with key[DEBUG] OP_GETTABUP: key is string 'hello', length=5
[DEBUG] aqlD_get: looking for key 'hello', dict size=1, dict=0x7fec8b5040e0
[DEBUG] findentry: searching for key 'hello', hash=261238937, index=9
[DEBUG] findentry: checking entry at index 9, hash=261238937, distance=0
[DEBUG] findentry: entry key is string 'hello'
[DEBUG] findentry: found matching entry!
[DEBUG] aqlD_get: found entry, value type=6