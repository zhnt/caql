// Edge cases for multi-return values

function test_constants_only() {
    return 1, 2, 3, "four", 5
}

function test_nested_expressions(x, y) {
    return x + y * 2, (x - y) * 3, x div (y + 1), "calc", x % y
}

function test_string_concat_returns(a, b) {
    let prefix = "num"
    return prefix + string(a), a + b, prefix + string(b), a * b, "done"
}

function test_single_vs_multi() {
    return 99
}

function test_empty_and_full(flag) {
    if flag {
        return "yes", 1, "true"
    } else {
        return "no", 0, "false"
    }
}

print("=== Edge Cases Multi-Return Tests ===")

// Test 1: Constants only
let c1, c2, c3, c4, c5 = test_constants_only()
print("Constants: " + string(c1) + ", " + string(c2) + ", " + string(c3) + ", " + c4 + ", " + string(c5))

// Test 2: Nested expressions
let n1, n2, n3, n4, n5 = test_nested_expressions(10, 3)
print("Nested: " + string(n1) + ", " + string(n2) + ", " + string(n3) + ", " + n4 + ", " + string(n5))

// Test 3: String concatenation in returns
let s1, s2, s3, s4, s5 = test_string_concat_returns(7, 8)
print("Strings: " + s1 + ", " + string(s2) + ", " + s3 + ", " + string(s4) + ", " + s5)

// Test 4: Single return
let single = test_single_vs_multi()
print("Single: " + string(single))

// Test 5: Conditional returns
let cond1, cond2, cond3 = test_empty_and_full(1)
print("Conditional true: " + cond1 + ", " + string(cond2) + ", " + cond3)

let cond4, cond5, cond6 = test_empty_and_full(0)
print("Conditional false: " + cond4 + ", " + string(cond5) + ", " + cond6)